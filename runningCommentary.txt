1. You asked for simple checkout functionality, and hinted that real input from a customer was required.

So I give you the capability of producing a price given a list of strings, presumably harvested off standard input dutifully typed in by the checkout operator on an old 70's teletype.

Rather than speculate on the nature of the IO system, let's focus on what we can test - take some strings and output a price.

You fixed the items and prices and this is going to be written in a short iteration - so no need to worry about configuration.

I would suggest the following tests:-

i) no items purchased means no bill - (OK, a bill of zero). Given the use of a map, this should hold both for the usual case of a map that actually has item data, and the trivial case of having no items in the shop in the first place.

ii) one item purchased means the customer pays the price of that item - so what is that price? If I want to test for this, the test has to either have knowledge of the prices burnt into 'Checkout' - which is violating DRY, or I have to expose the prices as named values - Checkout.applePrice, Checkout.orangePrice - better, but not nice due due to the coupling and fiddling in the test to cover the two things. Why not just pass the prices in as mapped values - if I work to keep the test logic simple, this might actually be easier than having explicit constants. Or should I have modelled fruit as a union type with a price property - still a bit messy to test, and messier to extend without active patterns? Map and be damned!
Hmmm - now that I have used Scalacheck I think it would have been easy to use a union type or plain old class hierarchy with runtime binding. OTOH, I can imagine this might change if the business wants to add more items - but then a class hierarchy or active patterns would work. Oh well.

iii) if I purchase N items (could be the same ones repeated, maybe all in a bunch, maybe not), then the customer pays the sum of the bill for the first N-1 plus the price of the Nth item.

Time to Scalacheck - this how I would do things in reality. This is going to blow my time budget, but you as well find out how I work in practice ... I always prefer to stop and up my game to just coding fast.

iv) As a sanity check, a customer would expect that regardless of how they give the items to the checkout person, they get the same bill in all circumstances.

v) WON'T DO - suppose an item was entered when it shouldn't have by the checkout person (or the customer changed their mind). Should there be a may of cancelling the last item, or the last apple or orange?

vi) Hang on, bills can't be negative if I don't have any reedemable offers or cashback (and if prices are non-negative).

vii) Whoah - the checkout person might not always bother to CaptiTalise correctly. Hang on, the items are *scanned*. Let's just assume they always scan correctly, so no test for now. WON'T DO.

viii) Thinking about having to test using a price map made me think about what happens if there are more than just apples and oranges (which are not the only fruit). I don't care ... the customer only cares about
apples and oranges, so I don't have to define behaviour for lemons yet - that can wait. Only can it? Suppose instead of "lemon" the checkout person types 'applemon'? What then? Again, see point vii - WON'T DO.

This decision can be made explicit in the code by adding a precondition that only items that exist as keys in the map can be billed for, and correctly capitalised at that.

ix) The business owner made an example bill - shouldn't this be tested as an acceptance test of sorts?

ASSUMPTION: work in integral pounds, so pence are fractional - do you pay 102p or £1.02?

ASSUMPTION: the original specification had positive prices - so forget about testing (and thinking about the implications of) negative prices in the item map. OTOH, there is now a precondition tat an item price is positive.

If I am going to use the same itemMap in the tests for a sequence of operations, why don't I express this as a curried signature in Checkout.apply?

At this point I'm happy that I've achieved the spec - only there is no mention of apples or oranges in the tests. That is because it doesn't really matter - I submit that it was just as easy to test with an item map.

I do need to supply a 'production item map', though...where to put it? For now, I'll lump it in the checkout and walk away ... there are ways of refactoring the dependency on the item map, say be DI or by using an abstract baseclass - or by just passing the thing from somewhere else. Depends on what the customer wants, let's stop now.

2. Now come the discounts (but no cashback still, just reduced prices).

The business is really saying that if the customer buys in certain multiples of apples or oranges, they get the same bill as if they had bought a different number of these items.

The previous tests still hold (including non-negative billing), I suggest adding:-

i) Given an offer of X items of 'stuff' for the price of Y of them, if the customer has a bill for N items, adding X items of stuff should increase the price by the bill for purchasing Y lots of stuff.

ii) Given an offer of X items of 'stuff' for the price of Y of them, if the customer has a bill for N items that do not include any stuff, adding x < X items of stuff should increase the price by the bill for purchasing x lots of stuff. WON'T DO - this is implied by i) and iii).

iii) Given an offer of X items of 'stuff' for the price of Y of them, if the customer has a bill for N items, progressively adding X items of stuff one by one should increase the price of the final bill by the price of purchasing one lot of stuff in X-1 cases.

To write these tests I need an item discount map - but if I pass this in to Checkout.apply, I then have the wrinkle of what if the item prices map doesn't align with the discount map. I can walk away from this by saying that the business doesn't care, but it would be a whole lot nicer if I had modelled with union types or classes - could have kept the price and discount together. As an alternative, I could map from item name to a tuple of price and discount. This leads the way to having more intelligent data - perhaps said tuple could become a self-describing item in a map with self-generated keys ... later.

I will do part of this refactoring now, as it's quite easy, and it makes the API so much easier to write a test for.

I am not doing tests or preconditions for malformed discounts, such as ones that take all apples to zero cost.

Actually, I will put in a precondition that a discount can't apply to no items at all - and for that matter, dishonest billing should not be in specification, so a discount cannot make goods more expensive.

3. General refactoring.

The item datums map is in practice a thing that rarely varies. Let's reflect that by using a curried function signature, which in turn allows us to hide the production item datums map away.